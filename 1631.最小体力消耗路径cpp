/*
 * @Author: Vanish
 * @Date: 2024-10-18 20:10:39
 * @LastEditTime: 2024-10-19 14:28:40
 * Also View: http://vanishing.cc
 * Copyright@ https://creativecommons.org/licenses/by/4.0/deed.zh-hans
 */
/*
 * @lc app=leetcode.cn id=1631 lang=cpp
 *
 * [1631] 最小体力消耗路径
 */

// @lc code=start

#include <vector>
#include <queue>
#include <unordered_set>
#include <algorithm>
using namespace std;

class Solution
{
public:
    // Dijkstra算法
    int minimumEffortPath(vector<vector<int>> &heights)
    {
        int dx[] = {0,0,-1,1};
        int dy[] = {-1,1,0,0};
        int m = heights.size();
        int n = heights[0].size();

        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;//第一个是路径长度,第二个是坐标
        vector<int> effort(m*n,INT_MAX);
        vector<int> path(m*n,-1);//存储上一节点
        
        pq.push(make_pair(0,make_pair(0,0)));//压入起点
        effort[0] = 0;

        while(!pq.empty())
        {
            pair<int,pair<int,int>> top = pq.top();
            pq.pop();
            int x = top.second.first;
            int y = top.second.second;

            if (x == m - 1 && y == n - 1) {
                return effort[x * n + y];
            }

            for(int i=0;i<4;i++)
            {
                int nx = x+dx[i];
                int ny = y+dy[i];
                if(nx>=0 && nx<m && ny>=0 && ny<n)
                {
                    if(effort[nx*n+ny] > max(effort[x*n + y],abs(heights[nx][ny]-heights[x][y])))
                    {
                        effort[nx*n+ny] = max(effort[x*n + y],abs(heights[nx][ny]-heights[x][y]));
                        path[nx*n+ny] = x*n+y;
                        pq.push(make_pair(effort[nx*n+ny],make_pair(nx,ny)));
                    }
                }
            }
        }

        return effort[m*n-1];
    }
};

// @lc code=end
